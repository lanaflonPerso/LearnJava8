package com.trl.stream_api;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Stream_distinct {

    public static void main(String[] args) {

//--------------------------------------------Rabota-s-methodom-distinct()----------------------------------------------

		/*Некоторые операции могут быть распараллелены более эффективно, если требование упорядочения опускается. Вызывая
		метод Stream, unordered(), можно указать, что упорядочение не имеет значения. Это, в частности, выгодно при выполнении
		операции методом Stream.distinct(). В упорядоченном потоке метод distinct() сохраняет первый из всех равных элементов.
		Этим ускоряется распараллеливание, поскольку в потоке исполнения, обрабатывающем отдельный сегмент, неизвестно, какие
		именно элементы следует отбросить, до тех пор,пока сегмент не будет обработан. Если же допускается сохранить любой
		однозначный элемент, то все сегменты могут быть обработаны параллельно (с помощью общего множества для отслеживания дубликатов).*/

        List<String> stringList = new ArrayList<>(Arrays.asList("A", "B", "C", "D", "E", "B"));

        stringList.stream()
                .distinct()
                .forEach(v -> System.out.print(v + ", "));

    }

}
